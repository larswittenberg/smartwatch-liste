//*******************************************************************************
// MIXINS
//*******************************************************************************

//*******************************************************************************
// Mixin - Mediaqueries
//
// https://medium.com/sass-syntactically-awesome-style-sheets/889927b37740
// https://gist.github.com/timknight/03e6335b8816aa534cf7
//*******************************************************************************

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xs {
      @media (max-width: 759px) { @content; }       // Mobile Devices
    }

    @else if $min == sm {
      @media (min-width: 760px) { @content; }       // Tablet Devices
    }

    @else if $min == md {
      @media (min-width: 1000px) { @content; }       // Desktops
    }

    @else if $min == lg {
      @media (min-width: 1240px) { @content; }      // Widescreen Desktops
    }

    @else if $min == xl {
      @media (min-width: 1480px) { @content; }      // Extra Widescreen Desktops
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}




//*******************************************************************************
// Mixin - Font-Smoothing: Better font-rendering on OSX
//
// http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
//*******************************************************************************
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}




//*******************************************************************************
// Helpers - Media Queries Debugging
//
// Inspiration: http://bueltge.de/test/media-query-debugger.php
//*******************************************************************************
@if $media-queries-debugging == on {
  body:before,
  body.mediaqueries-debugger:before {
    position: fixed;
    z-index: 2000;
    top: 0;
    left: 0;
    font-weight: 800;
    color: #000;
    text-align: center;
    padding: .2em;

    @include breakpoint(xs) {
      content: "XS";
      background: rgba(165, 42, 42, 0.8);
    }

    @include breakpoint(sm) {
      content: "SM";
      background: rgba(255, 0, 0, 0.8);
    }

    @include breakpoint(md) {
      content: "MD";
      background: rgba(0, 153, 153, 0.8);
    }

    @include breakpoint(lg) {
      content: "LG";
      background: rgba(205, 0, 116, 0.8);
    }

    @include breakpoint(xl) {
      content: "XL";
      background: rgba(76, 176, 252, 1);
    }
  }
}



//*******************************************************************************
// Clearfix
// Source: Bootstrap
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//*******************************************************************************
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}


//*******************************************************************************
// Placehoder Styling
//
// Example Useage:
// @include placeholder{ color: red; }
//*******************************************************************************
@mixin placeholder {
  &::-webkit-input-placeholder { @content; }
  &:-moz-placeholder           { @content; } // Firefox 18-
  &::-moz-placeholder          { @content; } // Firefox 19+
  &:-ms-input-placeholder      { @content; }
}



//*******************************************************************************
// CSS Content Columns
//
// Info: $columns: auto disable Columns
//*******************************************************************************
@mixin columns($columns: 2, $gap: 34) {
  -webkit-column-count: $columns;
  -webkit-column-gap: $gap + px;
  -moz-column-count: $columns;
  -moz-column-gap: $gap + px;
  column-count: $columns;
  column-gap: $gap + px;
  margin-top: -9px;

  p {
    widows: 3;
    orphans: 3;
  }

  p:first-child {
    margin-top: 0;
  }
}



//*******************************************************************************
// Hyphenation
//*******************************************************************************
@mixin hyphens($mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: $mode;
     -moz-hyphens: $mode;
      -ms-hyphens: $mode; // IE10+
       -o-hyphens: $mode;
          hyphens: $mode;
}


//*******************************************************************************
// Input Type=Number - Turn Off Number Input Spinners
//
// http://css-tricks.com/snippets/css/turn-off-number-input-spinners/
//*******************************************************************************
@mixin input-number__disable-spinner {
  input[type=number]::-webkit-inner-spin-button,
  input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
}



//*******************************************************************************
// Opacity
//
// http://css-tricks.com/snippets/css/cross-browser-opacity/
//*******************************************************************************
@mixin opacity($value) {
  $value--ms: $value*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value--ms})";
  filter: alpha(opacity=$value--ms);
  -moz-opacity: $value;
  -khtml-opacity: $value;
  opacity: $value;
}
